# Урок 5. Пишем сайт для риелторов
Виктории Михайловне 67 лет и больше половины своей жизни она занимается риелторством. Ещё во времена СССР она работала в «Бюро по обмену жилой площади», а с распадом организовала свою фирму.

Долгое время Валерия работала только в Москве, и вполне справлялась с бумажными записями, но с ростом компании количество бумажек стало просто невыносимым. Теперь у Виктории открыты филиалы по всей России, и со всей России на неё сыпется гора отчётов и докладов.

Валерия придерживается консервативных взглядов и не уважает все эти ваши «Интернеты», но без своего сайта стало совсем никуда. Валерия заказала сайт у студии «Быстро, но дорого» с одним условием: сайт начнёт работать завтра же, а доделывать будем на ходу.

За сайт уже взялась команда фронтендщиков и бэкендщиков, а вас позвали как эксперта по моделям данных. Модели будут много и часто меняться, но что бы не случилось данные нельзя терять ни в коем случае.

Покажите, как обращаются с данными профессионалы:

Напишите новые модели данных
Перенесите данные из одних моделей в другие без потерь
Освойте AdminModel




# Шаг 1 из 21 Запустите сайт
«Быстро, но дорого» уже запустили сайт, и с ним начали работать риэлторы Валерии. У них быстро накопились претензии к сайту, особенно к его админке, и вам поручили всё исправить. Для этого вам понадобится своя копия сайта.

## Как проверить
- По ссылке http://127.0.0.1:8000 увидите сайт как на скриншоте.
 https://dvmn.org/media/1_W786mWT.png

## Что понадобится

- Репозиторий сайта
https://github.com/devmanorg/real_estate_agency
	- Инструкции по запуску в README.md
- База данных с тестовыми данными
https://dvmn.org/filer/canonical/1565091134/187/


# Шаг 2 из 21 Войдите в админку
У Валерии в базе более 50 тысяч квартир, а поиска по ним — нет! Риелторы часто обновляют данные и без поиска работать не могут.
В админке можно включить поиск, но чтобы его увидеть нужно в эту админку сначала попасть.

## Как проверить
- Вы войдёте в админку и увидите интерфейс как на скриншоте.
https://dvmn.org/media/2_lw1D6EB.png
 
## Что понадобится
- createsuperuser
	- Создать суперпользователя
	https://developer.mozilla.org/ru/docs/Learn/Server-side/Django/Admin_site#%D0%A1%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5_%D1%81%D1%83%D0%BF%D0%B5%D1%80%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8F
- 127.0.0.1:8000/admin



# Шаг 3 из 21 Включите поиск в админке
Валерии нужен поиск по админке. Неужели, он не был предусмотрен в Django? Оказывается, был, его нужно лишь подключить.

## Как проверить
- В админке появится поиск по квартирам.
https://dvmn.org/media/3_XgyGoFJ.png
- Если ввести “Таганрог”, выведутся квартиры только из Таганрога. Если ввести “Садовая” —, то только квартиры с улицы Садовая.
- Новый коммит: add search to admin UI.

## Что понадобится
- ModelAdmin
https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#modeladmin-objects
	- search_fields	https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields
	- Пример реализации
	https://djangosimple.blogspot.com/2013/04/django_12.html
- Поля модели Flat
	- город
	- адрес
	- имя владельца
- Добавил ModelAdmin, но поиск не появляется
https://stackoverflow.com/a/41920313

ModelAdmin — это не “модели” из предыдущего урока. Модели — это интерфейс к БД, к ним можно делать запросы и всё такое. ModelAdmin — это просто “как эту модель показывать в админке”. Их нужно регистрировать, как в примерах по ссылкам выше.

Сайт использует базу SQLite, и поиск в ней чувствителен к регистру. “Таганрог” и “таганрог” — это разные запросы. В конце урока будет ссылка на статьи о других базах данных, где таких проблем нет.


# Шаг 4 из 21 Запретите менять дату объявления
Валерия хочет следить за тем, сколько объявлений добавляют в базу её сотрудники ежедневно. Она будет ориентироваться по дате создания объявлений, а чтобы риелторы не жульничали, Валерия просит запретить им редактировать поле.

## Как проверить
- Поле «Когда создано объявление» теперь внизу страницы и его нельзя поменять.
- Новый коммит: Customize Flat Admin.

## Что понадобится
- ModelAdmin
https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#modeladmin-objects
	- readonly_fields
	https://books.agiliq.com/projects/django-admin-cookbook/en/latest/changeview_readonly.html


# Шаг 5 из 21 Создайте поле new_building
На главной сайта есть фильтр по новостройкам, но его не успели подключить. Сначала программисты хотели фильтровать новостройки ориентируясь по году постройки — такое поле уже есть в БД —, но Валерия такой подход отвергла. Она хочет сама указать все новостройки в базе данных, а для этого нужно отдельное поле.

## Как проверить
- Вы добавите поле new_building к модели Flat.
- Новый коммит: Add model field Flat.new_building.

## Что понадобится
- BooleanField
- True — новостройка, False — старое здание, None — не заполнено.
- Миграция
https://devman.org/encyclopedia/django-migrations/migrations/

Он устарел и больше не используется в Django.


# Шаг 6 из 21 Разрешите редактировать new_building в списке
Валерия и её сотрудники начали заполнять новое поле, но уже после первых записей стало ясно: сейчас заполнять совсем неудобно. Нужно заходить в каждый объект и менять new_building по одной записи. Может, можно сделать это удобнее?

## Как проверить
- Страничка со списком квартир будет выглядеть как на скриншоте справа. Поле new_building будет доступно для редактирования сразу по всем квартирам на странице.
https://dvmn.org/media/6_wMSBuqE.png
- Новый коммит: setup Flat changelist page.

## Что понадобится
- ModelAdmin
https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#modeladmin-objects
	- list_display	https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display
	- list_editable	https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_editable
- Поля для отображения
	- Адрес квартиры
	- Цена квартиры
	- Новостройка
	- Год постройки
	- Город



# Шаг 7 из 21 Заполните поле автоматически
Наконец, Валерия поняла, что заполнять будет вечно… Теперь она всё же просит заполнить поле автоматически, а дальше они с сотрудниками поправят что им нужно.
Если дом построен в 2015 году и позже — считайте его новостройкой.

## Как проверить
- Вместо “неизвестно” в квартирах появится ясность: новостройка или нет.
https://dvmn.org/media/7_nvTTeJa.png
- Новый коммит: fill with data field Flat.construction_year.

## Что понадобится
- Дата-миграция
	- Статья на Девмане
	https://dvmn.org/encyclopedia/django-migrations/data-migrations/
	- Англоязычный туториал	https://simpleisbetterthancomplex.com/tutorial/2017/09/26/how-to-create-django-data-migrations.html
	- поле construction_year
	- поле new_building
- Если всё сломалось:
	- Перемещение между миграциями
	https://dvmn.org/encyclopedia/django-migrations/migrations-new-understanding/
	- Отмена дата-миграций
	https://dvmn.org/encyclopedia/django-migrations/data-migration-back/

Данных очень много, поэтому дата-миграция может применяться около 20-30 секунд.


# Шаг 8 из 21 Подключите фильтр на главной
Все эти мучения были не напрасны: теперь можно подключить фильтр по новостройкам на главной. Уже интересно, как они устроены?

Как проверить
- Фильтр по новостройкам теперь работает. Если поставить галочку “Только новостройки” — выведутся только квартиры с годом постройки не меньше 2015 года.
 https://dvmn.org/media/8_S3XJnn5.png
- Новый коммит: Enable filter through new buildings on index page.

## Что понадобится
- property/views.py
	- Переменная new_building. Принимает значение True, если галочка нажата.
- Переменная flats

Все они устроены примерно одинаково, действуйте по аналогии.


# Шаг 9 из 21 Добавьте фильтр в админке
На главной фильтр есть, но что делать сотрудникам, которые работают в админке? Риелторы Валерии жалуются, что им тоже нужен фильтр. Django-админка поддерживает такую функцию, её нужно только включить.

## Как проверить
- В админке появится фильтр по полю new_building. Валерии будет приятно, если вы добавите ещё несколько фильтров.
https://dvmn.org/media/9_b0PdhA0.png
- Новый коммит: setup filtering in admin UI.

## Что понадобится
-ModelAdmin
https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#modeladmin-objects
	- list_filter	https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter

# Шаг 10 из 21 Разрешите пользователям жаловаться
Валерии на почту всё ещё сыпется гора писем: пользователи сайта жалуются на некоторые объявления — где-то опечатки, а где-то просто явный обман. Разработчики уже трудятся над формой для жалоб, и им нужна модель, куда эти жалобы будут записываться.

## Как проверить
- В админке появится новая модель.
https://dvmn.org/media/10_8W9qIIe.png
- Новый коммит: add db model for complaints.

## Что понадобится
- Новая модель “Жалоба”
	- User
	https://docs.djangoproject.com/en/5.2/topics/auth/default/#user-objects
	- ForeignKey
	https://devman.org/encyclopedia/django_orm/foreign-key/
- Миграции
- Файл admin.py
	- ModelAdmin
	- raw_id_fields	https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.raw_id_fields

Модель пользователя уже есть в Django. Её нужно только импортировать.

Всё дело в ForeignKey на квартиру. Квартир много, и полный их список загружается для поля “Квартира, на которую пожаловались”. Чтобы этого избежать, используйте raw_id_fields.


# Шаг 11 из 21 Добавьте лайки
Валерия хочет развивать платформу: добавить квартирам лайки и предлагать недвижимость на основе предпочтений. Для этого ей уже сейчас нужно как-то хранить лайки.

## Как проверить
- На странице редактирования квартиры появится поле для лайков.
https://dvmn.org/media/Screenshot_from_2019-08-12_22-47-28.png
- Новый коммит: setup admin UI for likes.

## Что понадобится
- ManyToManyField
	- Как работает связь Многие ко Многим
	https://devman.org/encyclopedia/django_orm/m2m/
	- Документация к ManyToManyField
	https://docs.djangoproject.com/en/5.2/topics/db/examples/many_to_many/
	- User
	https://docs.djangoproject.com/en/5.2/topics/auth/default/#user-objects
- ModelAdmin
	- raw_id_fields	https://docs.djangoproject.com/en/5.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.raw_id_fields
- Если пользователь есть в Many to Many, то он лайкнул, а если нет — не лайкнул.

Сейчас из пользователей только вы, но на основном сайте пользователей будет много. Если не добавить это поле в raw_id_fields, то страничка никогда не прогрузится.

Many to many с лайками — это, по сути, то же самое, что и жалобы. Только не отдельной моделью, а полем.


# Шаг 12 из 21 Добавьте поле owner_pure_phone
Валерия заметила, что сотрудники вбивают в базу номера телефонов по-разному. Кто-то начинает номер с +7, кто-то с 8, кто-то ставит скобки, а кто-то нет. Из-за этого не получается искать квартиры по номеру телефона.

Чтобы это исправить, вам понадобится отдельное поле, куда вы сложите нормализованные телефоны. В Django нет специального поля для хранения номеров телефонов, зато есть библиотека, которая добавляет такое поле в Django.

## Как проверить
- У модели Flat появится новое поле owner_pure_phone.
https://dvmn.org/media/12_BL9MLi1.png
- При попытке указать номер телефона, вы увидите, что оно принимает только настоящие номера в двух разрешённых форматах. Попробуйте сохранить номер, начинающийся с +7000, таких точно не бывает.
- Убедитесь, что оставшееся пустым поле owner_pure_phone не мешает редактировать Flat через админку.
- Новый коммит: add field Flat.owner_pure_phone.

## Что понадобится
- django-phonenumber-field
https://github.com/stefanfoulis/django-phonenumber-field
	- Инструкции по установке в README.md
- requirements.txt


# Шаг 13 из 21 Нормализуйте номера телефонов
У риелторов уйдут месяцы на то, чтобы привести телефонные номера в порядок, а вам достаточно одной дата-миграции.

## Как проверить
- Новое поле owner_pure_phone будет заполнено для всех квартир. Чтобы проверить заполнение выведите их в админке.
https://dvmn.org/media/13_CyrrY8h.png
- Номера телефонов будут начинаться с +7**********.

## Что понадобится
- Дата-миграция
https://dvmn.org/encyclopedia/django-migrations/data-migrations/
- phonenumbers.parse
https://github.com/daviddrysdale/python-phonenumbers#example-usage
	- 'RU' — код страны
- ModelAdmins
	- Отобразить номера телефонов
- Если всё сломалось:
	- Перемещение между миграциями
	https://dvmn.org/encyclopedia/django-migrations/migrations-new-understanding/
	- Отмена дата-миграций
	https://dvmn.org/encyclopedia/django-migrations/data-migration-back/

## Советы
Попробуйте сперва преобразовать один из номеров в shell, чтобы понять, как это сделать со всеми номерами в дата-миграции.


# Шаг 14 из 21 Предусмотрите ошибки в БД
В этой базе все номера были заполнены правильно, но что если в БД на сервере риелтор всё-таки опечатался? Как поведет себя библиотека phonenumbers на несуществующих телефонных номерах? И чем закончится дата-миграция? Сайт упадет?
Пожалуй, код пока рано отправлять на сервер, лучше еще немного потестировать его у себя.

## Как проверить
- Вы заново запустите миграцию, заполняющую поле owner_pure_phone и убедитесь что она не ломается даже на некорректных номерах телефона.
https://dvmn.org/media/14_0XPVQgZ.png
- Новый коммит: Normalize Flat.phonenumbers into Flat.owner_pure_phone.

## Что понадобится
- Заменить один из номеров в БД на +70000000000
	- телефонов с кодом +7 (000) не существует
- migrate --fake
	- Отмена дата-миграций
	- Перемещение между миграциями
- Исправить код последней миграции
	- phonenumbers.is_valid_number()

## Советы
Поле PhoneNumberField не даст сохранить несуществующий телефонный номер, даже если его предварительно распарсит phonenumbers.parse(). Невалидный номер поле приравнивает к None.

Не пытайтесь обернуть вызов метода save() в блок try...except — не поможет. Чтобы такой вариант сработал придется вручную управлять транзакциями к БД.

Чтобы ускорить отладку миграции временно замените all() на .filter(owners_phonenumber='+70000000000').



# Шаг 15 из 21 Добавьте модель собственника
Валерии снова всё не нравится. Она всегда вела учёт клиентов в отдельной тетради, а здесь собственники привязаны к квартирам. А что, если клиент придёт к ней снова? Она даже не сможет понять, был-ли он у неё до этого.
Валерия хочет хранить эти данные отдельно. Похоже, вам понадобится новая модель.

## Как проверить
Вы создадите новую модель Owner.
- В админке она будет выглядеть как на скриншоте.
https://dvmn.org/media/15_emUyPXe.png
- Не забудьте про raw_id_fields!
Со страницы квартиры выбрать собственника пока не получится. Об этом будет в следующих шагах.
- Новый коммит: <что полезного сделано>.

## Что понадобится
- ManyToMany с квартирами
	- Документация
	https://docs.djangoproject.com/en/5.2/topics/db/examples/many_to_many/
	- Статья
	https://devman.org/encyclopedia/django_orm/m2m/
	- Разбор ManyToMany на примерах
	https://www.revsys.com/tidbits/tips-using-djangos-manytomanyfield/
- ModelAdmin
	- raw_id_fields для поля с квартирами.

## Советы
Валерия сразу предупредила, что бывает такое, что собственников у квартиры много, а бывает, что у собственника много квартир.
Если не подключить raw_id_fields, то страничка будет загружаться неприлично долго, потому что Django попытается отрисовать все 50 тысяч квартир.


# Шаг 16 из 21 Перенесите данные о собственниках в новую модель
Новая модель для хранения собственников готова, теперь можно перенести данные из модели Flat в новую. Наконец, у Валерии появится база клиентов.

## Как проверить
- Данные о собственниках появятся в новой модели с помощью дата-миграции.
P.S. вы же помните, как вывести названия нормально?
https://dvmn.org/media/16_p7O4Gcu.png
- Новый коммит: <что полезного сделано>.

## Что понадобится
- Модели квартиры и собственника
- Дата-миграция
https://docs.djangoproject.com/en/5.2/topics/migrations/#data-migrations
	- Идемпотентная миграция — повысит надежность кода и упростит отладку
	https://dvmn.org/encyclopedia/django-migrations/idempotent-migration/
	- get_or_create — аналог create, лучше подходящий для многократно запускаемых миграций

## Советы
Связь между квартирой и собственником перенесём потом.
Дата-миграция будет долгой, около 30 секунд.


# Шаг 17 из 21 Свяжите квартиры с собственниками
Какой толк от связи, если она нигде не заполнена? Сотрудники Валерии по-прежнему пользуются полем в модели Flat, вручную заполнять все связи они не будут.

## Как проверить
- Вы напишете новую дата-миграцию, которая свяжет собственников и квартиры.
https://dvmn.org/media/19_JMr1WBA.png
- Новый коммит: <что полезного сделано>.

## Что понадобится
- Схема-миграция
https://dvmn.org/encyclopedia/django-migrations/migrations-difference/
	- Добавить ManyToManyField (если ещё не добавили)
- Дата-миграция
	- Идемпотентная миграция — повысит надежность кода и упростит отладку
	https://dvmn.org/encyclopedia/django-migrations/idempotent-migration/
	- get_or_create — аналог create, лучше подходящий для многократно запускаемых миграций
	- .set()
		- Документация к ManyToMany
		https://docs.djangoproject.com/en/5.2/topics/db/examples/many_to_many/
		- Документация о связях в Django
		https://docs.djangoproject.com/en/5.2/ref/models/relations/
- Ещё одна схема-миграция с удалением ненужных полей во Flat
	- Поправить админку, чтобы она не ломалась

## Советы
Написание дата-миграций — это особо опасный момент разработки. Одним неловким движением вы рискуете испортить данные и нанести проекту серьёзный ущерб. Поэтому миграции требуют особо тщательного тестирования.

Бывает, что обстоятельства складываются не так и проверить миграцию удаётся лишь наполовину. Тогда остановитесь! Потратьте время на устранение всех препятствий: лучше настройте админку, исследуйте данные и напиши дополнительные запросы. Лучше так, чем рисковать базой данных проекта. Не останавливайтесь, пока не увидите надёжные и однозначные результаты тестирования.

Запустить миграцию
Открыть в админке любую квартиру
В новой вкладке открыть привязанный объект Owner
Сверить имя и телефон на двух страницах Owner и Flat
Повторить сценарий ещё для пары квартир
Возможно, Django попросит вас переименовать поле при схема-миграции. Переименуйте owner в owner_deprecated.

Если миграция исполняется неприлично долго, то вы не создали поисковые индексы для полей модели Owner. Используйте db_index.



# Шаг 18 из 21 Покажите собственников квартиры
Теперь у квартир есть собственники, а у собственников – квартиры. На странице собственника в админке можно выбрать какие квартиры ему принадлежат. Но вот на странице квартиры о собственниках ни слова!
Это стоит исправить. Для этого вам понадобится новая крутая технология Django: инлайны.

## Как проверить
На странице квартиры появится список её собственников:
- На странице квартиры появится список собственников как на скриншоте справа
- Не забудьте про raw_id_fields! Собственников ведь будут тысячи!
- Новый коммит: <что полезного сделано>.

## Что понадобится
- AdminInline
	- Статья на Mozilla
	- Inline вместе с ManyToMany
- Модель Flat.owned_by.through
	- Такой инлайн подгрузит овнеров через m2m.


M2M связь это под капотом такая же модель, как и другие. На неё можно посмотреть если запустить менеджмент-команду manage.py inspectdb:
```
class PropertyOwnerOwnedFlats(models.Model):
    owner = models.ForeignKey(PropertyOwner, models.DO_NOTHING)
    flat = models.ForeignKey(PropertyFlat, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'property_owner_owned_flats'
        unique_together = (('owner', 'flat'),)
```
То есть на уровне БД нет поля ManyToManyField. Это просто сокращённая запись. На самом деле ManyToManyField – это отдельная модель с двумя ForeignKey.
У неё есть поля owner и flat. Их можно сделать raw_id_field


Так же как ModelAdmin контролирует страницу редактирования квартиры, AdminInline контролирует вот эти небольшие карточки в разделе “СВЯЗЬИ OWNER-FLAT” на скриншоте.
Для Inline есть почти все те же настройки, что и для ModelAdmin, например, raw_id_fields. Загляните в модель PropertyOwnerOwnedFlats, выберите нужное поле и повесьте его в raw_id_fields внутри AdminInline.


# Шаг 19 из 21 Опубликуйте репозиторий
Поздравляем, вы дошли до конца урока! Осталось опубликовать код на GitHub, чтобы затем отправить код на проверку преподавателю.

## Как проверить
Вы опубликуете получившийся сайт на GitHub.

## Что понадобится
-Статья об упаковке проекта
https://devman.org/encyclopedia/git/git_project_publishing_checklist/

# Шаг 20 из 21 Пройдите карточки Anki
пропускаем

# Шаг 21 из 21 Отправьте на проверку
Преподаватель проверит, что:

Миграции не конфликтуют
Модели составлены верно
Данные не теряются при дата-миграциях
Репозиторий не заполнен кучей лишних миграций

